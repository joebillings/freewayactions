<library-action name="scriptyHandlerFunctions">
<action-javascript>
	//mandatory -- set this to true in any action that uses the prototype/scriptaculous stack
	var scripty = true;
	//set this to true in order to load the un-packed versions of the libraries
	var debug = false;
	function in_array(theArray,search_term) {
		var i = theArray.length;
		if (i > 0) {
			do {
				if (theArray[i] === search_term) {
					return true;
				}
			} while (i--);
		}
		return false;
	}
	function checkForUpdates(actionId,actionVersion){
	//example: action-button name="checkUpdates" label="Check for Updates" onClick=checkForUpdates(1,1.4)
		if(fwLaunchURL) {
			fwLaunchURL('http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('open location "http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion + '"'); 
			osa.fwCompile(); 
			osa.fwRun(); 
		}
	}
	
	function GetPageDiv(){
		var divs = fwDocument.fwTags.fwFindAll('div');
		for (i in divs){
			if (divs[i] && divs[i].id && divs[i].id.toString().indexOf('PageDiv') > -1) return divs[i];
		}
		return false;
	}

	function AddLibraryScript(theTag, theLibraryName)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwMarkups[theLibraryName];
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw(theMarkup);
		theTag.fwAddRawln('');
	}

	function AddEventObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw('Event.observe(');
		if(theObject != 'window') theObject = fwQuote(theObject,"'");
		scriptTag.fwAddRaw(theObject + ', ');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function AddObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		if(theObject != 'document') theObject = '$(' + fwQuote(theObject,"'") +')';
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		if(theObject != 'document') scriptTag.fwAddRawln("document.observe('dom:loaded',function(){");
		scriptTag.fwAddRaw(theObject + '.observe(');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		if(theObject != 'document') scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function lastOrders(){
		var actions = fwPage.fwFindAllActions();
		var scripties = new Array();
		for (i in actions){
			if (actions[i].scripty == true) scripties.push(actions[i]);
		}
		return this === scripties[scripties.length -1];
	}

	function LinkFileToHead(theTag, file){
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote(file);
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function LinkRemoteFileToHead(theTag, file){
		var path = "http://ajax.googleapis.com/ajax/libs/"
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.1.0/prototype.js" : "scriptaculous/1.8.3/scriptaculous.js"));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function AddFiles(filesString){
		var theHead = fwDocument.fwTags.fwFind("head");
		var connected = function(){
			if(fwShellCommand) {
				return fwShellCommand('curl ajax.googleapis.com');
			}else{
				var osa=new FWOSAInterpreter; 
				osa.fwWrite('do shell script "curl ajax.googleapis.com"'); 
				osa.fwCompile(); 
				return osa.fwRun();
			}
		}
		var useCustom = filesString && filesString.length > 0;
		var path = this.fwPathName;
		var prefix = path.substring(0, path.lastIndexOf(":")) + ':';
		var canon = 'prototype1610packer,prototype1610,scriptaculous183packer,scriptaculous183'.split(',');
		
		var files = (useCustom) ? filesString.split(',') : canon;

		if(!fwPage.libsList)
			fwPage.libsList = new Object();

		for (i in files){
			var file = files[i];
			if (file && !fwPage.libsList[file])
			{
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + file + '.js');
				myFile.fwClose();
				if (fwParameters[file])
				{
					fwParameters[file].fwSpecify(myFile);
					var path = fwParameters[file].toString();
					if(useCustom == true)
						fwPage.libsList[file] = path;
				}
				else
				{
					fwAlert(ParamString(kFileNotFound, file, ".js"));
				}
			}
		}

		if(lastOrders()){
			if(fwPage.libsList['prototype1610packer'] && fwPage.libsList['prototype1610'])
				fwPage.libsList['prototype1610packer'] = null;

			if(fwPage.libsList['scriptaculous183packer'] && fwPage.libsList['scriptaculous183'])
				fwPage.libsList['scriptaculous183packer'] = null;

			for (i in canon){
				if (fwPage.libsList[canon[i]]){
					var file = fwPage.libsList[canon[i]];
					connected ? LinkRemoteFileToHead(theHead, file) : LinkFileToHead(theHead, file);
					delete fwPage.libsList[canon[i]];
				}
			}
			for ( i in fwPage.libsList )
				LinkFileToHead(theHead, fwPage.libsList[i]);
		}
	}
	
	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	}
	
	function GetWidth(tag){
		//calculates total width of CSS styled element
		// somewhat naive: border * 2 + margin + padding + width
		var width = GetCSSAttribute(tag,'width');
		if(width) {
			width = parseInt(width.toString().replace(/[^\d+]/g,''),10);
		}else{
			width = 0;
		}
		var border = GetCSSAttribute(tag,'border');
		if(border){
			var b = border.match(/\d+px/);
			width += parseInt(b.toString().replace(/[^\d+]/g,'') * 2,10);
		}
		var padding = GetCSSAttribute(tag,'padding');
		if (padding){
			padding = padding.toString().replace(/[^\d ]/g,'').split(' ');
			switch(padding.length){
				case 4:
				case 3:
					width += parseInt(padding[1],10);
					width += parseInt(padding[3],10);
					break;
				case 2:
					width += parseInt(padding[1] * 2,10);
					break;
				case 1:
					width += parseInt(padding[0] * 2,10);
					break;
				default:
				break;
			}
		}
		var margin = GetCSSAttribute(tag,'margin');
		if (margin){
			margin = margin.toString().replace(/[^\d ]/g,'').split(' ');
			switch(margin.length){
				case 4:
				case 3:
					width += parseInt(margin[1],10);
					width += parseInt(margin[3],10);
					break;
				case 2:
					width += parseInt(margin[1] * 2,10);
					break;
				case 1:
					width += parseInt(margin[0] * 2,10);
					break;
				default:
				break;
			}
		}
		return width + 'px';
	}
	
	function GetHeight(tag){
		//calculates total height of CSS styled element
		// somewhat naive: border * 2 + margin + padding + height
		var height = GetCSSAttribute(tag,'height');
		if(height){
			height = parseInt(height.toString().replace(/[^\d+]/g,''),10);
		}else{
			height = 0;
		}
		var border = GetCSSAttribute(tag,'border');
		if(border){
			var b = border.match(/\d+px/);
			height += parseInt(b.toString().replace(/[^\d+]/g,'') * 2,10);
		}
		var padding = GetCSSAttribute(tag,'padding');
		if (padding){
			padding = padding.toString().replace(/[^\d ]/g,'').split(' ');
			switch(padding.length){
				case 4:
				case 3:
					height += parseInt(padding[0],10);
					height += parseInt(padding[2],10);
					break;
				case 2:
				case 1:
					height += parseInt(padding[0] * 2,10);
					break;
				default:
				break;
			}
		}
		var margin = GetCSSAttribute(tag,'margin');
		if (margin){
			margin = margin.toString().replace(/[^\d ]/g,'').split(' ');
			switch(margin.length){
				case 4:
				case 3:
					height += parseInt(margin[0],10);
					height += parseInt(margin[2],10);
					break;
				case 2:
				case 1:
					height += parseInt(margin[0] * 2,10);
					break;
				default:
				break;
			}
		}
		return height + 'px';
	}



</action-javascript>
</library-action>

<page-action name="Protaculous">
<action-version version="0.6">
Protaculous Action
Walter Davis Studio 2007
</action-version>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-popup name="lib" title="Use Library">
<value name="prototype">
<value name="prototype-packed">
<value name="scriptaculous">
<value name="scriptaculous-packed">
</action-popup>
<action-text var name="domloaded" default="">
<action-text var name="windowLoad" default="">
<action-label name="divider1" title="-"/>
<action-label name="window" title="document.observe('dom:loaded', function(){"/>
<action-label name="comment1" title="//functions placed in this block will execute as soon as the DOM is ready"/>
<action-button name="function1" title="Function Body" onClick=EditCode('domloaded');>
<action-label name="window2" title="});"/>
<action-label name="divider2" title="-"/>
<action-label name="window3" title="Event.observe(window, 'load', function(){"/>
<action-label name="comment2" title="//functions placed in this block will execute after the page is completely loaded"/>
<action-button name="function2" title="Function Body" onClick=EditCode('windowLoad');>
<action-label name="window4" title="});"/>

<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function EditCode(codeName){ //Cut down from Tim Plumb's Source Code Snooper
		var mycustomcode = fwParameters[codeName].toString();
		var myprompt = "This code will be executed when the window finishes loading.";
		var mycustomcodeprompt = fwBigPrompt(myprompt, mycustomcode);
		if (mycustomcodeprompt != null) { //if the cancel button was not hit
			if (mycustomcodeprompt != mycustomcode) {//check that the code has changed
				fwParameters[codeName].fwValue = mycustomcodeprompt;
			}
		}
	}
	function fwInterface(){
		fwPage.libsList = new Object();
	}	
	
	function fwAfterStartHead()
	{
		var filesString = '';
		if(fwParameters['lib'].fwValue == 'scriptaculous-packed'){
			filesString = 'prototype1610packer,scriptaculous183packer';
		}
		if(fwParameters['lib'].fwValue == 'prototype-packed'){
			filesString = 'prototype1610packer';
		}
		if(fwParameters['lib'].fwValue == 'scriptaculous'){
			filesString = 'prototype1610,scriptaculous183';
		}
		if(fwParameters['lib'].fwValue == 'prototype'){
			filesString = 'prototype1610';
		}
		AddFiles(filesString);
	}
	function fwBeforeEndHead(){
		if(fwParameters['domloaded'] && fwParameters['domloaded'] != '') AddObserver(fwDocument.fwTags.fwFind("head"), 'domloaded', 'document','dom:loaded');
		if(fwParameters['windowLoad'] && fwParameters['windowLoad'] != '') AddEventObserver(fwDocument.fwTags.fwFind("head"), 'windowLoad', 'window','load');
	}
	
</action-javascript>
</page-action>


<item-action name="Observer">
<action-version version="0.2">
Observer Action
Walter Davis Studio 2008
</action-version>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-popup name="lib" title="Use Library">
<value name="prototype">
<value name="prototype-packed">
<value name="scriptaculous">
<value name="scriptaculous-packed">
</action-popup>
<action-text name="evt1" title="DOM Event">
<action-button name="doFunction1" title="Function Body" onClick=EditCode('Code1'); advance="no">
<action-text var name="Code1" default="">
<action-text name="evt2" title="DOM Event">
<action-button name="doFunction2" title="Function Body" onClick=EditCode('Code2'); advance="no">
<action-text var name="Code2" default="">
<action-text name="evt3" title="DOM Event">
<action-button name="doFunction3" title="Function Body" onClick=EditCode('Code3'); advance="no">
<action-text var name="Code3" default="">
<action-text name="evt4" title="DOM Event">
<action-button name="doFunction4" title="Function Body" onClick=EditCode('Code4'); advance="no">
<action-text var name="Code4" default="">

<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function EditCode(codeName){ //Cut down from Tim Plumb's Source Code Snooper
		var mycustomcode = fwParameters[codeName].toString();
		var myprompt = "This code will be executed when the window finishes loading.";
		var mycustomcodeprompt = fwBigPrompt(myprompt, mycustomcode);
		if (mycustomcodeprompt != null) { //if the cancel button was not hit
			if (mycustomcodeprompt != mycustomcode) {//check that the code has changed
				fwParameters[codeName].fwValue = mycustomcodeprompt;
			}
		}
	}
	function fwInterface(){
		fwPage.libsList = new Object();
	}	
	
	function fwAfterStartHead()
	{
		var filesString = '';
		if(fwParameters['lib'].fwValue == 'scriptaculous-packed'){
			filesString = 'prototype1610packer,scriptaculous183packer';
		}
		if(fwParameters['lib'].fwValue == 'prototype-packed'){
			filesString = 'prototype1610packer';
		}
		if(fwParameters['lib'].fwValue == 'scriptaculous'){
			filesString = 'prototype1610,scriptaculous183';
		}
		if(fwParameters['lib'].fwValue == 'prototype'){
			filesString = 'prototype1610';
		}
		AddFiles(filesString);
	}
	function fwBeforeEndHead(){
		var theHead = fwDocument.fwTags.fwFind("head");
		if(fwParameters['evt1'] && fwParameters['evt1'].fwValue != '' && fwParameters['Code1'] && fwParameters['Code1'] != '') AddObserver(theHead, 'Code1', fwItem.toString(),fwParameters['evt1']);
		if(fwParameters['evt2'] && fwParameters['evt2'].fwValue != '' && fwParameters['Code2'] && fwParameters['Code2'] != '') AddObserver(theHead, 'Code2', fwItem.toString(),fwParameters['evt2']);
		if(fwParameters['evt3'] && fwParameters['evt3'].fwValue != '' && fwParameters['Code3'] && fwParameters['Code3'] != '') AddObserver(theHead, 'Code3', fwItem.toString(),fwParameters['evt3']);
		if(fwParameters['evt4'] && fwParameters['evt4'].fwValue != '' && fwParameters['Code4'] && fwParameters['Code4'] != '') AddObserver(theHead, 'Code4', fwItem.toString(),fwParameters['evt4']);
	}
	
</action-javascript>
</item-action>


<item-action name="Carousel">
<action-appliesto non-html32/>
<action-version version="1.2">
Carousel
Action ©2007-9 Walter Lee Davis
Glider.js ©2007 Curbly LLC - author Bruno Bornsztein <bruno@missingmethod.com>

Apply the action to a group of HTML items to turn them into a smooth-scrolling carousel.

</action-version>
<action-markup custom name="glide">Event.observe(window,'load',function(){
	var select = (window.location.href.indexOf('?') > -1) ? window.location.href.split('?')[1] : '';
    var my_glider = new Glider(__glideObject__, {duration:__duration____glideInterval__, initialSection: select});
    $$('.__glideClass__.next').each(function(elm){
    	    elm.observe('click',function(evt){
    		Event.stop(evt);
    		return my_glider.next();
    	});
    });
    $$('.__glideClass__.previous').each(function(elm){
    	    elm.observe('click',function(evt){
    		Event.stop(evt);
    		return my_glider.previous();
    	});
    });
});
</action-markup>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-file name ="glider" var/>
<action-text name="autoglide" title="Auto-Glide Interval">
<action-text name="duration" title="Effect Duration (seconds)" default="0.5" />
<action-popup name="axis" title="Axis">
<value name="horizontal">
<value name="vertical">
</action-popup>
<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function getPosition(item){
		if(!item['_top']) item['_top'] = item.fwTop;
		if(!item['_left']) item['_left'] = item.fwLeft;
		if(item.fwParent){
			var p = item.fwParent;
			if(p.toString().indexOf("PageDiv") < 0){
				p['_top'] = item._top + p.fwTop;
				p['_left'] = item._left + p.fwLeft;
				return getPosition(p);
			}
		}
		return [item._top,item._left];
	}
	function AddCarouselListener(theTag, theLibraryName, theObject, autoGlideInterval)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwMarkups[theLibraryName];
		var duration = fwParameters['duration'].fwValue;
		if(!duration > 0) duration = '0.5';
		theMarkup = theMarkup.toString().replace(/__glideObject__/g,theObject);
		theMarkup = theMarkup.toString().replace(/__glideClass__/g,theObject.toString().slice(1,-1));
		if(autoGlideInterval != ''){
			autoGlideInterval = ', autoGlide:true, frequency:' + autoGlideInterval;
		}
		theMarkup = theMarkup.toString().replace(/__glideInterval__/,autoGlideInterval);
		theMarkup = theMarkup.toString().replace(/__duration__/,duration);
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw(theMarkup);
		theTag.fwAddRawln('');
	}
	function fwAfterStartHead(){
		(debug) ? AddFiles('prototype1610,scriptaculous183,glider') : AddFiles('prototype1610packer,scriptaculous183packer,glider');
	}
	function clonePosition(target,source){
		pos = ['top','left','bottom','right','z-index','position'];
		if(source && source.style){
			for(var i = 0; i < pos.length; i++){
				if(GetCSSAttribute(source,pos[i])){
					SetCSSAttribute(target,pos[i],GetCSSAttribute(source,pos[i]));
				}
			}
			if(GetCSSAttribute(source,'height'))
				SetCSSAttribute(target,'height',GetHeight(source));
			if(GetCSSAttribute(source,'width'))
				SetCSSAttribute(target,'width',GetWidth(source));
		}
		
	}
	function removePositioning(target){
		pos = ['top','left','bottom','right','z-index'];
		for(var i = 0; i < pos.length; i++){
			if(GetCSSAttribute(target,pos[i])){
				SetCSSAttribute(target,pos[i],null);
			}
		}
		SetCSSAttribute(target,'position','relative');
	}
	
	function fwAfterEndBody(){
		var thisItem = fwDocument.fwTags.fwFind("div", fwItem);
		if (thisItem){
			var scroller = thisItem.fwAddEnclosing("div",true);
			var wrapper = scroller.fwAddEnclosing("div",true);
			wrapper.id = fwQuote('carousel_' + thisItem.id.toString().slice(1,-1));
			clonePosition(wrapper,thisItem);
			SetCSSAttribute(thisItem,'position','relative');
			SetCSSAttribute(thisItem,'top',null);
			SetCSSAttribute(thisItem,'left',null);
			SetCSSAttribute(thisItem,'bottom',null);
			SetCSSAttribute(thisItem,'right',null);
			SetCSSAttribute(thisItem,'z-index',null);
// 			var b = GetCSSAttribute(thisItem,'border');
 			var w = parseInt(GetCSSAttribute(wrapper,'width'));
// 			var h = parseInt(GetCSSAttribute(wrapper,'height'));
// 			if(b){
// 				var t = parseInt(b.substr(b.lastIndexOf(' ') + 1, b.length));
// 				SetCSSAttribute(wrapper,'width',w + (2 * t) + 'px');
// 				SetCSSAttribute(wrapper,'height',h + (2 * t) + 'px');
// 			}else{
// 				SetCSSAttribute(wrapper,'width',w + 'px');
// 				SetCSSAttribute(wrapper,'height',h + 'px');
// 			}
			SetCSSAttribute(wrapper,'overflow','hidden');
			scroller['class'] = fwQuote('scroller');
			var dummy = thisItem.fwAddEnclosing("",true);
			var panes = fwPage.fwFindAllActions(2,'Carousel Pane');
			for (var i in panes){
				if(panes[i].fwParameters['targets'] && panes[i].fwParameters['targets'].toString() == thisItem.id.toString().slice(1,-1)){
					var p = fwDocument.fwTags.fwFind("div", panes[i].fwItem);
					thisItem['class'] = fwQuote("section");
					removePositioning(p);
					p['class'] = fwQuote("section");
					dummy.fwMove(p);
					dummy.fwAddRawln('');
				}
			}
			//needed to support Freeway 5
			SetCSSAttribute(thisItem,"overflow",null);
			removePositioning(thisItem);
			AddCarouselListener(fwDocument.fwTags.fwFind("head"), 'glide',wrapper.id,fwParameters['autoglide']);
			var scrollWidth = parseInt((panes.length + 1) * (w + 50)) + "px"; 
			var myHead = fwDocument.fwTags.fwFind("head");
			if (myHead){
				var cssStyles = myHead.fwAddCSSStyles();
				var theId = wrapper.id.toString().slice(1,-1);
				cssStyles.fwAddRawln("#" + theId + " div.scroller { overflow:hidden }");
				if(fwParameters['axis'] == 'horizontal') cssStyles.fwAddRawln("#" + theId + " div.scroller div.section { overflow:hidden; float:left; height:" + GetCSSAttribute(wrapper,"height") + "; width:" + GetCSSAttribute(wrapper,"width") + " }");
				if(fwParameters['axis'] == 'vertical') cssStyles.fwAddRawln("#" + theId + " div.scroller div.section { overflow:hidden; height:" + GetCSSAttribute(wrapper,"height") + "; width:" + GetCSSAttribute(wrapper,"width") + " }");
				if(fwParameters['axis'] == 'horizontal') cssStyles.fwAddRawln("#" + theId + " div.scroller { width:" + scrollWidth + "; height:" + GetCSSAttribute(wrapper,"height") + " }");
			}
		}
	}
</action-javascript>
</item-action>

<item-action name="Carousel Pane">
<action-appliesto layer non-html32/>
<action-version version="0.3">
Carousel Pane
©2009 Walter Lee Davis

Apply the action to any layer to designate a Carousel pane.

</action-version>
<action-itemref name="targets" title="Target" filter="activeTarget"/>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-file name ="glider" var/>
<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function activeTarget(item){
		var carousels = fwPage.fwFindAllActions(2,'Carousel');
		if(carousels) {
			for( i in carousels){
				if(item == carousels[i].fwItem) return true;
			}
		}
		return false;
	}
	function fwInterface(){
		if(fwParameters['targets'].fwValue == null){
			var carousels = fwPage.fwFindAllActions(2,'Carousel');
			if(carousels) {
				for(i in carousels){
					c = carousels[i].fwItem;
					var theEnd = false;
					fwParameters['targets'].fwValue = c;
				}
			}
		}
	}
	function fwAfterStartHead(){
		(debug) ? AddFiles('prototype1610,scriptaculous183,glider') : AddFiles('prototype1610packer,scriptaculous183packer,glider');
	}

</action-javascript>
</item-action>


<item-action name="Carousel Button">
<action-appliesto graphic pass-through/>
<action-version version="0.9">
Carousel Button
©2007 Walter Lee Davis

Apply the action to any linked (or linkable) graphic to create scroll buttons for the Carousel.

</action-version>
<action-itemref name="targets" title="Target" filter="activeTarget"/>
<action-popup name="direction" title="Scroll Direction">
<value name="previous">
<value name="next">
</action-popup>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-file name ="glider" var/>
<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function activeTarget(item){
		var carousels = fwPage.fwFindAllActions(2,'Carousel');
		if(carousels) {
			for( i in carousels){
				if(item == carousels[i].fwItem) return true;
			}
		}
		return false;
	}
	function fwInterface(){
		if(fwParameters['targets'].fwValue == null){
			var carousels = fwPage.fwFindAllActions(2,'Carousel');
			if(carousels) {
				for(i in carousels){
					c = carousels[i].fwItem;
					var theEnd = false;
					fwParameters['targets'].fwValue = c;
				}
			}
		}
	}
	function getPosition(item){
		if(!item['_top']) item['_top'] = item.fwTop;
		if(!item['_left']) item['_left'] = item.fwLeft;
		if(item.fwParent){
			var p = item.fwParent;
			if(p.toString().indexOf("PageDiv") < 0){
				p['_top'] = item._top + p.fwTop;
				p['_left'] = item._left + p.fwLeft;
				return getPosition(p);
			}
		}
		return [item._top,item._left];
	}
	function fwAfterEndHTML(){
		var thisItem = fwDocument.fwTags.fwFind("a", fwItem);
		if (!thisItem){
			thisItem = fwDocument.fwTags.fwFind("img", fwItem);
			thisItem = thisItem.fwAddEnclosing('a',true);
			thisItem.href = fwQuote('#');
		}
		if(thisItem){
			thisItem['class'] = fwQuote('carousel_' + fwParameters['targets'] + ' ' + fwParameters['direction']);
		}
	}
	function fwAfterStartHead(){
		(debug) ? AddFiles('prototype1610,scriptaculous183,glider') : AddFiles('prototype1610packer,scriptaculous183packer,glider');
	}
</action-javascript>
</item-action>

<action name="Carousel Text Tab">
<action-version version="0.2">
Carousel Text Tab
©2009 Walter Lee Davis

Use this Action inline to create direct text navigation links to one of the Carousel options.

</action-version>
<action-text name="Text"   script default="link text"/>
<action-itemref name="targets" title="Target" filter="activeTarget"/>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-file name ="glider" var/>
<action-javascript>
<action-include name="scriptyHandlerFunctions">

	function activeTarget(item){
		var carousels = fwPage.fwFindAllActions(2,['Carousel','Carousel Pane']);
		if(carousels) {
			for( i in carousels){
				if(item == carousels[i].fwItem) return true;
			}
		}
		return false;
	}
	function fwInterface(){
		if(fwParameters['targets'].fwValue == null){
			var carousels = fwPage.fwFindAllActions(2,['Carousel','Carousel Pane']);
			if(carousels) {
				for(i in carousels){
					c = carousels[i].fwItem;
					var theEnd = false;
					fwParameters['targets'].fwValue = c;
				}
			}
		}
	}
		
	function fwAfterEndHTML(){
		var enclosingTag = fwDocument.fwTags.fwFind("", fwItem);
		if (enclosingTag)
		{
			var href = enclosingTag.fwFindEnclosing("a");
			if (!href)
				href = enclosingTag.fwFind("a", fwItem);
			if (!href)
			{
				href = enclosingTag.fwAdd("a", true);
				href.href = fwQuote('#' + fwParameters['targets'].fwValue);
			}

			href.fwAddRaw(fwEncode(fwParameters.Text, fwPage));
		}
		var parent = href.fwFindEnclosing('div');
		if(!parent || parent.id == '"PageDiv"'){
			if(href.fwFindEnclosing('p')){
				parent = href.fwFindEnclosing('p');
				if(! parent['class'] || parent['class'].fwValue.indexOf('controls') < 0){
					if(parent['class'] && parent['class'].fwValue != ''){
						parent['class'] =  fwQuote(parent['class'].fwValue.slice(1,-1) + ' controls');
					}else{
						parent['class'] = fwQuote('controls');
					}
				}
			}else{
				parent = href.fwAddEnclosing('div',true);
			}
		}else{
			parent['class'] = fwQuote('controls');
		}
		if(href && (!href.id)){
			href.id = fwQuote('text_tab_' + fwParameters['targets'].fwValue);
		}
	}
	function fwAfterStartHead(){
		(debug) ? AddFiles('prototype1610,scriptaculous183,glider') : AddFiles('prototype1610packer,scriptaculous183packer,glider');
	}
</action-javascript>
</action>

<item-action name="Carousel Tab">
<action-appliesto graphic pass-through/>
<action-version version="0.7">
Carousel Tab
©2007 Walter Lee Davis

Apply the action to any graphic to create direct navigation to one of the Carousel options.

</action-version>
<action-itemref name="targets" title="Target" filter="activeTarget"/>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1610" var/>
<action-file name ="scriptaculous183" var/>
<action-file name ="glider" var/>
<action-javascript>
<action-include name="scriptyHandlerFunctions">

	function activeTarget(item){
		var carousels = fwPage.fwFindAllActions(2,['Carousel','Carousel Pane']);
		if(carousels) {
			for( i in carousels){
				if(item == carousels[i].fwItem) return true;
			}
		}
		return false;
	}
	function fwInterface(){
		if(fwParameters['targets'].fwValue == null){
			var carousels = fwPage.fwFindAllActions(2,['Carousel','Carousel Pane']);
			if(carousels) {
				for(i in carousels){
					c = carousels[i].fwItem;
					var theEnd = false;
					fwParameters['targets'].fwValue = c;
				}
			}
		}
	}
		
	function fwAfterEndHTML(){
		var thisImg = fwDocument.fwTags.fwFind("img",fwItem);
		if(thisImg){
			var thisItem = thisImg.fwFindEnclosing("a");
		}
		if (!thisItem){
			thisItem = fwDocument.fwTags.fwFind("img", fwItem);
			thisItem = thisItem.fwAddEnclosing('a',true);
		}
		thisItem.href = fwQuote('#' + fwParameters['targets'].fwValue);
		var parent = thisItem.fwFindEnclosing('div');
		if(!parent || parent.id == '"PageDiv"'){
			if(thisItem.fwFindEnclosing('p')){
				parent = thisItem.fwFindEnclosing('p');
				if(! parent['class'] || parent['class'].fwValue.indexOf('controls') < 0){
					if(parent['class'] && parent['class'].fwValue != ''){
						parent['class'] =  fwQuote(parent['class'].fwValue.slice(1,-1) + ' controls');
					}else{
						parent['class'] = fwQuote('controls');
					}
				}
			}else{
				parent = thisItem.fwAddEnclosing('div',true);
			}
		}else{
			parent['class'] = fwQuote('controls');
		}
		var theImg = thisItem.fwFind('img');
		if(theImg && (!theImg.id)){
			theImg.id = fwQuote('tab_' + fwParameters['targets'].fwValue);
		}
	}
	function fwAfterStartHead(){
		(debug) ? AddFiles('prototype1610,scriptaculous183,glider') : AddFiles('prototype1610packer,scriptaculous183packer,glider');
	}
</action-javascript>
</item-action>
